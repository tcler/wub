# this is a Certification Authority configuration file
# suitable for CA.tcl.  It will be converted to openssl format

ca {
    default_ca CA_default	;# the default CA config
}

CA_default {
    # dir	;# where all this crap lives - set by CA.tcl
    certs [file join $dir certs]		;# Where the issued certs are kept
    crl_dir [file join $dir crl]		;# Where the issued crl are kept

    # certificate

    database [file join $dir index.txt]		;# database index file.
    serial [file join $dir serial] 		;# The current serial number
    new_certs_dir [file join $dir newcerts]	;# default place for new certs.

    crlnumber [file join $dir crlnumber]	;# the current crl number
    crl [file join $dir crl]			;# the current CRL
    crl_extensions crl_ext			;# extensions to add to a CRL
    default_crl_days 30				;# how long before next CRL
    
    RANDFILE [file join $dir private .rnd]	;# private random number file
    x509_extensions v3_user			;# The extentions to add to the cert

    name_opt ca_default		;# Subject Name options
    cert_opt ca_default		;# Certificate field options
    
    default_days 365		;# how long to certify for
    default_md sha1		;# which md to use
    #default_startdate
    #default_enddate
    #default_crl_days
    #default_crl_hours

    preserve no		;# keep passed DN ordering
    policy policy_anything
    unique_subject no		;# stop index.txt being used to enforce

    # private_key
    # RANDFILE
    # email_in_dn

    # x509_extensions
    # crl_extensions
    # msie_hack
    # name_opt
    # cert_opt
    copy_extensions copy
}

# Some CAs do not yet support subjectAltName in CSRs.
# Instead the additional names are form entries on web
# pages where one requests the certificate...
#subjectAltName          = @alt_names

alt_names {
    DNS.1   = www.foo.com
    DNS.2   = www.foo.org
}

crl_ext {
    issuerAltName "issuer:copy"
    authorityKeyIdentifier "keyid,issuer:always"
}

req {
    default_keyfile ca.key
    distinguished_name req_distinguished_name
    attributes req_attributes
    req_extensions v3_req
    x509_extensions v3_user
    email_in_dn yes
    #prompt no
}

req_attributes {
    challengePassword "challenge password"
}

v3_req {
    basicConstraints "critical,CA:FALSE"
    keyUsage "nonRepudiation,digitalSignature,keyEncipherment"
}

v3_careq {
    basicConstraints "critical,CA:TRUE"
    keyUsage "cRLSign,keyCertSign,digitalSignature,nonRepudiation"
}

v3_ca {
    subjectKeyIdentifier "hash"
    authorityKeyIdentifier "keyid,issuer:always"
    basicConstraints  "critical,CA:true"
    keyUsage "cRLSign,keyCertSign,digitalSignature,nonRepudiation"
    issuerAltName "issuer:copy"
    subjectAltName "email:copy"
}

# x509 extensions that broke
#authorityInfoAccess "OCSP;URI:[file join $url ocsp]"
#nsCaRevocationUrl [file join $url ca.crl]
#crlDistributionPoints "URI:[file join $url]"
#nsCertType "$perms"
#nsCaRevocationUrl "[file join $url]"

# create x509 extensions for each class of generated certificates
v3_user {
    keyUsage "nonRepudiation,digitalSignature,keyEncipherment"
    extendedKeyUsage "clientAuth"
    subjectKeyIdentifier "hash"
    authorityKeyIdentifier "keyid,issuer:always"
    basicConstraints CA:FALSE
    subjectAltName "email:copy"
}

v3_server {
    keyUsage "digitalSignature, keyEncipherment"
    extendedKeyUsage "serverAuth"
    subjectKeyIdentifier "hash"
    authorityKeyIdentifier "keyid,issuer:always"
    basicConstraints CA:FALSE
    subjectAltName "email:copy"
}
