#################################################################
## This is a WUB configuration file. The file format is the
## Tcl Config file format (see: Utilities/Config.tcl).
## Entries in this file are orgainized under section headers to
## facilitate reading and understanding the contents of the file.
#################################################################


#################################################################
## The following sections configure modules that are part of the
## Wub core. Most of these parameter settings can also be set from
## the command line. Note that the these sections have names that
## start with an upper case character.
#################################################################

# Wub section contains global configuration variables
Wub {
    globaldocroot 1; # do we use Wub's docroot, or caller's
    docroot $topdir/docroot; # where to look for document root
}

# Shell is an optional module to permit tcl command line interaction
# via a telnet session.  Please change the password if you enable it.
Shell {
    load 1
    port 8082;		# Console listening socket
    password PASSWORD;	# define a shell login password - change this!
}

# Httpd is the protocol module for HTTP1.1
Httpd {
    logfile wub.log	;# logfile - log filename for common log format logging
    max_conn 20		;# max_conn - maximum connections per IP
    no_really 30	;# no_really - how many times to complain about max_conn before taking action
    retry_wait 20	;# retry_wait - how long to advise client to wait on exhaustion
    timeout 60000	;# timeout - ms of idle to tolerate
}

# STX markup language used in the default Wub configuration,
# and variously when we want to generate some HTML on the fly
STX {
    load 1	;# we need STX for default markup
    scripting 0	;# permit stx scripting?
}

# User Agent Parser
# used to analyse the UserAgent field passed in by browsers
# it's not really safe to rely on this stuff, but if you want to
# do browser sniffing, it at least deals with the morass of half-truths
# browsers tell us (e.g. did you know IE reports that it's a version of Mozilla?)
UA {
    # load 1	;# parse user agent into $r -ua
}

# Listener module defines the HTTP network listener
# connections are established through this module, and simply passed
# into the protocol engine.  This module allows you to define where
# the server should accept connections (which port, which interface, etc.)
Listener {
    -port 8080	;# listener's port
    #-myaddr X	;# make listener listen on the nominated interface
}

# Https module defines the HTTPS network listener
# same as Listener, but allows you to specify TLS parameters
Https {
    -port 8081	;# listener's port
    #-myaddr X	;# make listener listen on the nominated interface
    #-host X	;# host the listener thinks it's serving
    -certfile server-public.pem
    -keyfile server-private.pem
    #-ca domain	;# the domain of the CA Certificate Authority (if any)
}

# Cache module controls server-side caching
# Wub will cache generated content, following HTTP protocols,
# enabling you to avoid regenerating expensive content.
Cache {
    #load 0	;# turn off caching
    high 100 	;# high water mark for cache
    low 90	;# low water mark for cache
    maxsize 204800	;# maximum size of object to cache
    weight_age 0.02	;# age weight for replacement
    weight_hits -2.0	;# hits weight for replacement
}

# Sscgi module supports the SCGI protocol for backends
# this enables Wub to hang off the back of another web
# server, processing requests for it.
Sscgi {
    -port 0	;# scgi port
    -scgi_send ::Sscgi Send ;# scgi send command
}

# Human - heuristic attempt to distinguish between robots and humans
# the premise is that robots don't return cookies, but humans do. YMMV.
Human {
	load 0
	logdir $Wub::docroot
}

#################################################################
## The remainder of this file defines how URL dispatching is to
## be performed by the server that is being configured. Note that
## the section names are all lower case. The section names are
## arbitrary but should be related to the domain being defined.
##
## The WUB server provides several built-in domain types to help
## with the process of URL dispatch configureation. The following
## domain types are part of the WUB server core.
##
## block    - The block domain type blocks access for a URL pattern.
## code     - The code domain type executes a tcl script and
##            returns the result.
## domain   - The 'domain' domain type associates a domain
##            handler with a URL domain. The domain handler
##            is a code module that that process a request and
##            returns a result.
## literal  - The literal domain return a literal string.
## redirect - The redirect domain redirects one domain to another.
## rewrite  - The rewite domain rewrites a domain path to a new path.
##
## The WUB executable contains a set of CORE domain handlers
## that implement a traditional web server.
##
## CORE handlers
## ---------------
## File   - The File domain handler provides a traditional Web
##          view for filesystem hierarchies, maping a URL suffix
##          to a file system path.
## Icons  - The Icons domain handler returns one of several
##          built-in WUB icons as its response.
## CGI    - The CGI domain handler provides a traditional CGI
##          interface.
## Direct - The Direct domain associates a user defined domain
##          handler with a URL domain.
## Mason  - The Mason domain maps a URL domain onto a file-system
##          hierarchy and also provides a templating and pre- and
##          post- filtering of requests and responses (respectively).
##
## The WUB distribution also contains additional domain handlers
## that are production ready or are still being developed. These
## additional domain handlers and be found in the Domain directory
## under the <docroot> tree.
##
## PROD handlers
## ---------------
## About  - The About domain handler returns API documentation for
##          the domain handlers.
## Nub    - The Nub domain handler implements an API to the
##          functionallity provide by the Nub module. The Nub module
##          controls the dispatch function of the WUB server and the
##          API allows you to dynamically modifiy the mapping of
##          URL requests to domain handlers.
## JQ     - The JQ domain provides an interface to the jQuery
##          (see: http://en.wikipedia.org/wiki/JQuery) cross-browser
##          JavaScript library.
##
## DEVL handlers
## ---------------
## RAM       - The RAM domain handler uses the URL suffix as the
##             index value of a tcl array. The tcl array is accessed
##             using the index value and the result is returned.
## Sticky    -
## Tupler    -
## Repo      -
## Tie       -
## Sinorca   -
## Simplicio -
#################################################################


#################################################################
## The following domain definitions establish the basic server URL
## dispatching. No group 1 or 2 domain handlers are used for these
## domains. Modify these definitions to configure the basic
## capabilities of the server.
#################################################################

## the special URL 'default' determines Wub's behaviour when a URL can't be resolved
default {
    url default
    code {set r [Http NotFound $r]; <p> "[dict get $r -uri] Not Found"}
}

## find the favico icon in /images
favico {
    url /favico.ico
    rewrite /images/twub32.jpg
}

# the URL / redirects to /wub
toplevel {
    url /
    redirect /wub/
}

# important to have a robots.txt
# The literal nub returns whatever content is given in its first argument as a response
# to requests for the URL.  An optional second argument gives its content-type
robots {
    url /robots.txt
    literal "User-agent: *\nDisallow:\n"
    mime text/plain
}

# block some bogus URLs
# URLs of the following forms are blocked by the server.
noexe {
    block /*.exe
}
nowmv {
    block /*.wmv
}
nocgi {
    block /cgi-bin/
}

# /wub is handled by a Mason domain
wub {
    url /wub/ 
    domain Mason
    root $Wub::docroot
}

icons {
    url /icons/
    domain Icons
}

css {
    url /css/
    domain File
    root $Wub::docroot/css
    expires tomorrow
}

images {
    url /images/
    domain File
    root $Wub::docroot/images
    expires next week
}

scripts {
    url /scripts/
    domain File
    root $Wub::docroot/scripts
    expires tomorrow
}

html {
    url /html/
    domain File
    root $Wub::docroot/html
}

CGI {
    url /CGI/
    domain CGI
    root $Wub::docroot/cgi
    # windows tcl executor
    # executors   .tcl C:/Tcl/bin/base-tcl8.6-thread-win32-ix86.exe
}

introspect {
    url /introspect/
    domain Introspect
}

# use the build-in code domain
# The code domain evaluates its first argument as a tcl script, and returns it with the 
# optional type specified by the second domain
clock {
    url /clock.txt 
    code {clock format [clock seconds]}
    mime text/plain
}

icorewrite {
    # rewrite all urls of the form /*.jpg at the top level
    # so they appear to be under the /images/ URL.  It picks the parsed URL path
    # directly from the request dict to regenerate the URL in script form.
    url {^//[^/]+/[^/]+[.](jpg|gif|png)$}
    rewrite {/images/[Url tail [dict get $r -path]]}
}

cssrewrite {
    # rewrite all urls of the form /*.css at the top level
    # so they appear under the /css/ URL, using the -regsub rewrite form, substituting
    # the examined URL directly into its result using tcl regsub command.patth
    url {^//[^/]+/[^/]+[.]css$}
    rewrite {/css/[Url tail [dict get $r -path]]}
}

#################################################################
## The following domain definitions add functionality using the
## group 1 domain handlers. These handlers provide enable WUB
## interface documentation, a domain edit capaiblity and an AJAX
## domain.
#################################################################

#nubs {
#    url /nub/
#    domain Nub
#}

# the About domain provides documentation for Wub modules and Domains
about {
    url /wub/docs/
    domain About
}

jquery {
    url /jquery/
    domain JQ
}

#################################################################
## GROUP 2
## The are experimental domain handlers
#################################################################

#ram {
#    url /ram/
#    domain RAM
#}

#sticky {
#    url /sticky/
#    domain Sticky
#    file ./sticky.db
#    hotzone #sticky
#}

# demo the tupler domain
#tupler {
#    url /tuple/
#    domain Tupler
#    -loaddir [file join $Wub::topdir Tuple]
#}

#repo {
#    url /repo/
#    domain Repo
#    tar 1
#    upload 1
#    root $Wub::docroot
#}

#tie {
#    url /tie/
#    domain Tie
#}

#tiny {
#    url /tiny/
#    domain Tiny
#	file $topdir/data/tiny.db
#}

#sinorca {
#    url /sinorca/
#    domain Sinorca
#}

#simplicio {
#    url /simplicio/
#    domain Simplicio
#}

#wubtk {
#	domain WubTk	;# WubTk domain
#	url /tk/	;# URL at which domain is mounted
#	-loaddir [file join $Wub::topdir WubTk]	;# where to find the WubTk package
#	file [file join $Wub::topdir WubTk test.tk]	;# user script file
#	lambda ""		;# user script
#	theme_switcher 1	;# turn on the demo theme switcher?
#	#cookie wubtk		;# application cookie name
#	expires ""		;# application cookie expiry
#	cookiepath /mount/path 	;# application cookie path - defaults to domain's url
#	stylesheet ""		;# application stylesheet URL
#	css {}			;# explicit CSS
#	fontsize 12		;# base font size in PX
#	theme start		;# jquery UI theme
#	theme_switcher 1	;# enable UI theme switcher?
#	timeout 0		;# enable push?
#	icons /icons/		;# URL prefix for spinner
#	spinner_size 20		;# size of spinner
#	#spinner_style "position: fixed; top:10px; left: 10px;"	;# css for spinner
#}

# Add a themeable SVG icon set.
#buttons {
#    url /button
#    domain Button
#    -loaddir [file join $Wub::topdir Domains Button]
#}
