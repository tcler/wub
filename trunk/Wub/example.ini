;;;;;
; This is an example ini file for Wub

;;;;;
; The following sections initialize Wub modules
;
; sections named with uppercase characters denote modules

[Wub]
; Wub section contains global configuration variables
globaldocroot=1
		; globaldocroot - do we use Wub's docroot, or caller's
docroot=../docroot
		; docroot - where to look for document root
stx_scripting=0
		; stx_scripting - permit stx scripting?

[Shell]
; Shell is an optional module to permit tcl command line interaction
; via a telnet session.  Please change the password if you enable it.
load=0
		; change to 1 to load Shell
port=8082
		; Console listening socket
password=PASSWORD
		; define a shell login password - change this!

[Httpd]
; Httpd is the protocol module for HTTP1.1
logfile=wub.log
		; logfile - log filename for common log format logging
max_conn=20
		; max_conn - maximum connections per IP
no_really=30
		; no_really - how many times to complain about max_conn before taking action
retry_wait=20
		; retry_wait - how long to advise client to wait on exhaustion
timeout=60000
		; timeout - ms of idle to tolerate

[Listener]
; Listener module defines the HTTP network listener
-port=8080
		; listener's port

[Https]
; Https module defines the HTTPS network listener
-port=8081
		; listener's port
-tls=
		; tls args

[Cache]
; Cache module controls server-side caching
high=100
 	; high water mark for cache
low=90
		; low water mark for cache
maxsize=204800
		; maximum size of object to cache
weight_age=0.02
		; age weight for replacement
weight_hits=-2.0
		; hits weight for replacement

[Scgi]
; Scgi module supports the SCGI protocol for backends
-port=0
		; scgi port
-scgi_send=::Scgi Send
		; scgi send command

;;;;;
; The following sections define nubs, which control dispatch by URL.
;
; sections named in lowercase are nub/dispatch sections
;
; a nub section can define a variable:
; domain, redirect, code, literal, rewrite, redirect, block
;	and this will define its type.

[default]
;# the special URL 'default' determines Wub's behaviour when a URL can't be resolved
url = default
code = {set r [Http NotFound $r]; <p> "[dict get $r -uri] Not Found"}

[favico]
;# find the favico icon in /images
url = /favico.ico
redirect = /images/favico.ico

[toplevel]
; the URL / redirects to /wub
url = /
redirect=/wub/

[robots]
; important to have a robots.txt
; The literal nub returns whatever content is given in its first argument as a response
; to requests for the URL.  An optional second argument gives its content-type
url = /robots.txt
literal = User-agent: *\nDisallow:\n
mime = text/plain

[wub]
; /wub is handled by a Mason domain
url = /wub/ 
domain = Mason
root = $::Site::docroot
auth = .before
wrapper = .after

[about]
; the About domain provides documentation for Wub modules and Domains
url = /wub/docs/
domain = About

[sticky]
url = /sticky/
domain = Sticky
file = ./sticky.db
hotzone = #sticky 

[jquery]
url = /jquery/
domain = JQ

[icons]
url = /icons/
domain = Icons

[css]
url = /css/
domain = File
root = [file join $::Site::docroot css]
expires = tomorrow

[images]
url = /images/
domain = File
root = [file join $::Site::docroot images]
expires = "next week"

[scripts]
url = /scripts/
domain = File
root = [file join $::Site::docroot scripts]
expires = tomorrow

[html]
url = /html/
domain = File root [file join $::Site::docroot html]

[bin]
url = /bin/
domain = File root [file join $::Site::docroot bin]

[icorewrite]
; rewrite all urls of the form /*.jpg at the top level
; so they appear to be under the /images/ URL.  It picks the parsed URL path
; directly from the request dict to regenerate the URL in script form.
url = ^/[^/]+[.](jpg|gif|png|ico)$
rewrite = /images/[file tail [dict get $r -path]]

[cssrewrite]
; rewrite all urls of the form /*.css at the top level
; so they appear under the /css/ URL, using the -regsub rewrite form, substituting
; the examined URL directly into its result using tcl regsub command.patth
url = ^(/[^/]+)[.]css$
rewrite = -regsub /css/\1.css

[CGI]
url = /CGI/
domain = CGI
root = [file join $::Site::docroot cgi]

[clock]
; just for fun
; The code domain evaluates its first argument as a tcl script, and returns it with the 
; optional type specified by the second domain
url = /clock.txt 
code = clock format [clock seconds]
mime = text/plain

[tupler]
; demo the tupler domain
url = /tuple/
domain = Tupler

[repo]
url = /repo/
domain = Repo
tar = 1
upload = 1
root = $::Site::docroot

[tie]
url = /tie/
domain = Tie

[sinorca]
url = /sinorca/
domain = Sinorca

[simplicio]
url = /simplicio/
domain = Simplicio

[ram]
url = /ram/
domain = RAM

; block some bogus URLs
; URLs of the following forms are blocked by the server.
[noexe]
block = /*.exe

[nophp]
block /*.php

[nowmv]
block /*.wmv

[nocgi]
block /cgi-bin/
